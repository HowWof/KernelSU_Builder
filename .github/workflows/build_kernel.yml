name: KernelSU Builder

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        version: ["LineageOS-20", "Zenitsu"]

    env:
      VERSION: ${{ matrix.version }}
      ARCH: arm64
      KBUILD_BUILD_HOST: Github-Action
      KBUILD_BUILD_USER: "KernelSU_Builder"
      CLANG_PATH: ${{ github.workspace }}/kernel/clang/bin

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-pip jq libarchive-tools zip lib32z-dev libghc-bzlib-dev pngcrush ^liblzma.* python-is-python3 libsdl1.2-dev autoconf libxml2-utils wget pkg-config unzip w3m gawk imagemagick libc6-dev gcc-multilib patchelf gzip clang subversion optipng device-tree-compiler ccache gcc ^liblz4-.* lzip rsync automake fastboot python2.7 patch zip pngquant expat lzop libswitch-perl make libcap-dev python2 adb libxml2 bison libxml-simple-perl zlib1g-dev libarchive-tools libtool squashfs-tools gperf ^lzma.* libfl-dev ncurses-dev pwgen flex libtinfo5 minicom liblz4-tool libmpfr-dev libssl-dev lib32ncurses5-dev libbz2-dev lib32z1-dev libgmp-dev git libncurses5-dev dpkg-dev libmpc-dev lftp python2-dev python3 rar git-lfs policycoreutils unrar libncurses5 libbz2-1.0 ncftp tree python-all-dev bzip2 bc ftp software-properties-common tar libgl1-mesa-dev texinfo schedtool curl libexpat1-dev llvm libc6-dev-i386 apt-utils cmake g++-multilib build-essential re2c axel maven xsltproc g++ libx11-dev libxml-sax-base-perl gnupg bash
          sudo pip3 install yq

      - name: Clone clang and kernel sources
        run: |
          chmod +x clone.sh
          ./clone.sh

      - name: Add Clang to PATH
        run: |
          echo "${CLANG_PATH}" >> $GITHUB_PATH

      - name: Compile kernel
        run: |
          chmod +x build.sh
          ./build.sh
          echo "CLEANING=true" >> $GITHUB_ENV

      - name: Move kernel without KernelSU support to output directory
        run: |
          mkdir outw
          chmod +x move.sh
          ./move.sh

      - name: Clean build environment
        if: env.CLEANING == true
        run: |
          chmod +x clean.sh
          ./clean.sh
          echp "CLEANING=false" >> $GITHUB_ENV
          echo "KERNELSU=true" >> $GITHUB_ENV

      - name: Add KernelSU support to kernel
        if: env.KERNELSU == true
        run: |
          chmod +x kernelSU.sh
          ./kernelSU.sh

      - name: Compile kernel with KernelSU support
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Move kernel with KernelSU support to output directory
        run: |
          chmod +x move.sh
          ./move.sh

      - name: List files for testing
        run : |
          ls outw/false 
          ls outw/true